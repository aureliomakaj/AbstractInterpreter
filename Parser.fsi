// Signature file for parser generated by fsyacc
module Parser
type token = 
  | EOF
  | COMMA
  | ASSIGN
  | SEMICOLON
  | LPAR
  | RPAR
  | LCUR
  | RCUR
  | LRANGE
  | RRANGE
  | TRUE
  | FALSE
  | IF
  | THEN
  | ELSE
  | WHILE
  | DO
  | PLUS
  | MINUS
  | STAR
  | SLASH
  | LT
  | GT
  | LEQ
  | GEQ
  | EQ
  | NEQ
  | AND
  | OR
  | NOT
  | INT of (System.Int32)
  | ID of (string)
type tokenId = 
    | TOKEN_EOF
    | TOKEN_COMMA
    | TOKEN_ASSIGN
    | TOKEN_SEMICOLON
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_LCUR
    | TOKEN_RCUR
    | TOKEN_LRANGE
    | TOKEN_RRANGE
    | TOKEN_TRUE
    | TOKEN_FALSE
    | TOKEN_IF
    | TOKEN_THEN
    | TOKEN_ELSE
    | TOKEN_WHILE
    | TOKEN_DO
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_STAR
    | TOKEN_SLASH
    | TOKEN_LT
    | TOKEN_GT
    | TOKEN_LEQ
    | TOKEN_GEQ
    | TOKEN_EQ
    | TOKEN_NEQ
    | TOKEN_AND
    | TOKEN_OR
    | TOKEN_NOT
    | TOKEN_INT
    | TOKEN_ID
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startprog
    | NONTERM_expr
    | NONTERM_cond
    | NONTERM_prog
/// This function maps tokens to integer indexes
val tagOfToken: token -> int

/// This function maps integer indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val prog : (FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> FSharp.Text.Lexing.LexBuffer<'cty> -> ( ConcreteDomain.prog ) 
