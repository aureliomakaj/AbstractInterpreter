// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 1 "Parser.fsy"

open ConcreteDomain

# 10 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | ASSIGN
  | SEMICOLON
  | BRA
  | KET
  | IF
  | THEN
  | ELSE
  | WHILE
  | DO
  | PLUS
  | MINUS
  | STAR
  | SLASH
  | LT
  | GT
  | LEQ
  | GEQ
  | EQ
  | NEQ
  | AND
  | OR
  | NOT
  | INT of (System.Int32)
  | ID of (string)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_ASSIGN
    | TOKEN_SEMICOLON
    | TOKEN_BRA
    | TOKEN_KET
    | TOKEN_IF
    | TOKEN_THEN
    | TOKEN_ELSE
    | TOKEN_WHILE
    | TOKEN_DO
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_STAR
    | TOKEN_SLASH
    | TOKEN_LT
    | TOKEN_GT
    | TOKEN_LEQ
    | TOKEN_GEQ
    | TOKEN_EQ
    | TOKEN_NEQ
    | TOKEN_AND
    | TOKEN_OR
    | TOKEN_NOT
    | TOKEN_INT
    | TOKEN_ID
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startProg
    | NONTERM_start
    | NONTERM_Prog
    | NONTERM_expr
    | NONTERM_stm
    | NONTERM_StmList

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | ASSIGN  -> 1 
  | SEMICOLON  -> 2 
  | BRA  -> 3 
  | KET  -> 4 
  | IF  -> 5 
  | THEN  -> 6 
  | ELSE  -> 7 
  | WHILE  -> 8 
  | DO  -> 9 
  | PLUS  -> 10 
  | MINUS  -> 11 
  | STAR  -> 12 
  | SLASH  -> 13 
  | LT  -> 14 
  | GT  -> 15 
  | LEQ  -> 16 
  | GEQ  -> 17 
  | EQ  -> 18 
  | NEQ  -> 19 
  | AND  -> 20 
  | OR  -> 21 
  | NOT  -> 22 
  | INT _ -> 23 
  | ID _ -> 24 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_ASSIGN 
  | 2 -> TOKEN_SEMICOLON 
  | 3 -> TOKEN_BRA 
  | 4 -> TOKEN_KET 
  | 5 -> TOKEN_IF 
  | 6 -> TOKEN_THEN 
  | 7 -> TOKEN_ELSE 
  | 8 -> TOKEN_WHILE 
  | 9 -> TOKEN_DO 
  | 10 -> TOKEN_PLUS 
  | 11 -> TOKEN_MINUS 
  | 12 -> TOKEN_STAR 
  | 13 -> TOKEN_SLASH 
  | 14 -> TOKEN_LT 
  | 15 -> TOKEN_GT 
  | 16 -> TOKEN_LEQ 
  | 17 -> TOKEN_GEQ 
  | 18 -> TOKEN_EQ 
  | 19 -> TOKEN_NEQ 
  | 20 -> TOKEN_AND 
  | 21 -> TOKEN_OR 
  | 22 -> TOKEN_NOT 
  | 23 -> TOKEN_INT 
  | 24 -> TOKEN_ID 
  | 27 -> TOKEN_end_of_input
  | 25 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startProg 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_Prog 
    | 3 -> NONTERM_expr 
    | 4 -> NONTERM_expr 
    | 5 -> NONTERM_expr 
    | 6 -> NONTERM_expr 
    | 7 -> NONTERM_expr 
    | 8 -> NONTERM_expr 
    | 9 -> NONTERM_stm 
    | 10 -> NONTERM_stm 
    | 11 -> NONTERM_stm 
    | 12 -> NONTERM_stm 
    | 13 -> NONTERM_StmList 
    | 14 -> NONTERM_StmList 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 27 
let _fsyacc_tagOfErrorTerminal = 25

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | ASSIGN  -> "ASSIGN" 
  | SEMICOLON  -> "SEMICOLON" 
  | BRA  -> "BRA" 
  | KET  -> "KET" 
  | IF  -> "IF" 
  | THEN  -> "THEN" 
  | ELSE  -> "ELSE" 
  | WHILE  -> "WHILE" 
  | DO  -> "DO" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | STAR  -> "STAR" 
  | SLASH  -> "SLASH" 
  | LT  -> "LT" 
  | GT  -> "GT" 
  | LEQ  -> "LEQ" 
  | GEQ  -> "GEQ" 
  | EQ  -> "EQ" 
  | NEQ  -> "NEQ" 
  | AND  -> "AND" 
  | OR  -> "OR" 
  | NOT  -> "NOT" 
  | INT _ -> "INT" 
  | ID _ -> "ID" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | ASSIGN  -> (null : System.Object) 
  | SEMICOLON  -> (null : System.Object) 
  | BRA  -> (null : System.Object) 
  | KET  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | THEN  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | WHILE  -> (null : System.Object) 
  | DO  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | STAR  -> (null : System.Object) 
  | SLASH  -> (null : System.Object) 
  | LT  -> (null : System.Object) 
  | GT  -> (null : System.Object) 
  | LEQ  -> (null : System.Object) 
  | GEQ  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | NEQ  -> (null : System.Object) 
  | AND  -> (null : System.Object) 
  | OR  -> (null : System.Object) 
  | NOT  -> (null : System.Object) 
  | INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 0us; 65535us; 1us; 65535us; 0us; 1us; 7us; 65535us; 12us; 5us; 13us; 6us; 14us; 7us; 15us; 8us; 17us; 9us; 18us; 10us; 23us; 11us; 5us; 65535us; 0us; 26us; 19us; 20us; 21us; 22us; 24us; 25us; 27us; 28us; 1us; 65535us; 0us; 2us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 2us; 4us; 12us; 18us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 2us; 2us; 14us; 1us; 3us; 1us; 4us; 5us; 5us; 5us; 6us; 7us; 8us; 5us; 5us; 6us; 6us; 7us; 8us; 5us; 5us; 6us; 7us; 7us; 8us; 5us; 5us; 6us; 7us; 8us; 8us; 5us; 5us; 6us; 7us; 8us; 9us; 6us; 5us; 6us; 7us; 8us; 10us; 11us; 5us; 5us; 6us; 7us; 8us; 12us; 1us; 5us; 1us; 6us; 1us; 7us; 1us; 8us; 1us; 9us; 1us; 9us; 2us; 10us; 11us; 2us; 10us; 11us; 2us; 10us; 11us; 1us; 11us; 1us; 11us; 1us; 12us; 1us; 12us; 1us; 12us; 1us; 13us; 1us; 14us; 1us; 14us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 7us; 9us; 11us; 17us; 23us; 29us; 35us; 41us; 48us; 54us; 56us; 58us; 60us; 62us; 64us; 66us; 69us; 72us; 75us; 77us; 79us; 81us; 83us; 85us; 87us; 89us; |]
let _fsyacc_action_rows = 29
let _fsyacc_actionTableElements = [|3us; 32768us; 5us; 18us; 8us; 23us; 24us; 16us; 0us; 49152us; 1us; 16386us; 2us; 27us; 0us; 16387us; 0us; 16388us; 2us; 16389us; 12us; 14us; 13us; 15us; 2us; 16390us; 12us; 14us; 13us; 15us; 0us; 16391us; 0us; 16392us; 4us; 16393us; 10us; 12us; 11us; 13us; 12us; 14us; 13us; 15us; 5us; 32768us; 6us; 19us; 10us; 12us; 11us; 13us; 12us; 14us; 13us; 15us; 5us; 32768us; 9us; 24us; 10us; 12us; 11us; 13us; 12us; 14us; 13us; 15us; 2us; 32768us; 23us; 3us; 24us; 4us; 2us; 32768us; 23us; 3us; 24us; 4us; 2us; 32768us; 23us; 3us; 24us; 4us; 2us; 32768us; 23us; 3us; 24us; 4us; 1us; 32768us; 1us; 17us; 2us; 32768us; 23us; 3us; 24us; 4us; 2us; 32768us; 23us; 3us; 24us; 4us; 3us; 32768us; 5us; 18us; 8us; 23us; 24us; 16us; 1us; 16394us; 7us; 21us; 3us; 32768us; 5us; 18us; 8us; 23us; 24us; 16us; 0us; 16395us; 2us; 32768us; 23us; 3us; 24us; 4us; 3us; 32768us; 5us; 18us; 8us; 23us; 24us; 16us; 0us; 16396us; 0us; 16397us; 3us; 32768us; 5us; 18us; 8us; 23us; 24us; 16us; 0us; 16398us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 4us; 5us; 7us; 8us; 9us; 12us; 15us; 16us; 17us; 22us; 28us; 34us; 37us; 40us; 43us; 46us; 48us; 51us; 54us; 58us; 60us; 64us; 65us; 68us; 72us; 73us; 74us; 78us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 1us; 1us; 1us; 1us; 3us; 3us; 3us; 3us; 3us; 4us; 6us; 4us; 1us; 3us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; 4us; 4us; 4us; 4us; 5us; 5us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16387us; 16388us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16395us; 65535us; 65535us; 16396us; 16397us; 65535us; 16398us; |]
let _fsyacc_reductions ()  =    [| 
# 228 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?>  ConcreteDomain.prog  in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : 'gentype__startProg));
# 237 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?>  ConcreteDomain.prog  in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 30 "Parser.fsy"
                                _1 
                   )
# 30 "Parser.fsy"
                 : 'gentype_start));
# 248 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_StmList in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 33 "Parser.fsy"
                                   Prog(List.rev(_1)) 
                   )
# 33 "Parser.fsy"
                 :  ConcreteDomain.prog ));
# 259 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> System.Int32 in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 37 "Parser.fsy"
                                                   Int(_1) 
                   )
# 37 "Parser.fsy"
                 : 'gentype_expr));
# 270 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 38 "Parser.fsy"
                                                   Var(_1) 
                   )
# 38 "Parser.fsy"
                 : 'gentype_expr));
# 281 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 39 "Parser.fsy"
                                                   BinOp(_1, "+", _3) 
                   )
# 39 "Parser.fsy"
                 : 'gentype_expr));
# 293 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 40 "Parser.fsy"
                                                   BinOp(_1, "-", _3) 
                   )
# 40 "Parser.fsy"
                 : 'gentype_expr));
# 305 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 41 "Parser.fsy"
                                                   BinOp(_1, "*", _3) 
                   )
# 41 "Parser.fsy"
                 : 'gentype_expr));
# 317 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 42 "Parser.fsy"
                                                   BinOp(_1, "/", _3) 
                   )
# 42 "Parser.fsy"
                 : 'gentype_expr));
# 329 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 46 "Parser.fsy"
                                                                           Assign(_1, _3) 
                   )
# 46 "Parser.fsy"
                 : 'gentype_stm));
# 341 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_expr in
            let _4 = parseState.GetInput(4) :?> 'gentype_stm in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 47 "Parser.fsy"
                                                                           IfThenElse(_2, _4, None) 
                   )
# 47 "Parser.fsy"
                 : 'gentype_stm));
# 353 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_expr in
            let _4 = parseState.GetInput(4) :?> 'gentype_stm in
            let _6 = parseState.GetInput(6) :?> 'gentype_stm in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 48 "Parser.fsy"
                                                                           IfThenElse(_2, _4, Some _6) 
                   )
# 48 "Parser.fsy"
                 : 'gentype_stm));
# 366 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_expr in
            let _4 = parseState.GetInput(4) :?> 'gentype_stm in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 49 "Parser.fsy"
                                                                           While(_2, _4) 
                   )
# 49 "Parser.fsy"
                 : 'gentype_stm));
# 378 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_stm in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 53 "Parser.fsy"
                                   [_1] 
                   )
# 53 "Parser.fsy"
                 : 'gentype_StmList));
# 389 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_StmList in
            let _3 = parseState.GetInput(3) :?> 'gentype_stm in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 54 "Parser.fsy"
                                                      _3 :: _1  
                   )
# 54 "Parser.fsy"
                 : 'gentype_StmList));
|]
# 402 "Parser.fs"
let tables : FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 28;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = tables.Interpret(lexer, lexbuf, startState)
let Prog lexer lexbuf :  ConcreteDomain.prog  =
    engine lexer lexbuf 0 :?> _
