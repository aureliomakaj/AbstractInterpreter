// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 1 "Parser.fsy"

open ConcreteDomain

# 10 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | ASSIGN
  | SEMICOLON
  | LPAR
  | RPAR
  | LCUR
  | RCUR
  | IF
  | THEN
  | ELSE
  | WHILE
  | DO
  | PLUS
  | MINUS
  | STAR
  | SLASH
  | LT
  | GT
  | LEQ
  | GEQ
  | EQ
  | NEQ
  | AND
  | OR
  | NOT
  | INT of (System.Int32)
  | ID of (string)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_ASSIGN
    | TOKEN_SEMICOLON
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_LCUR
    | TOKEN_RCUR
    | TOKEN_IF
    | TOKEN_THEN
    | TOKEN_ELSE
    | TOKEN_WHILE
    | TOKEN_DO
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_STAR
    | TOKEN_SLASH
    | TOKEN_LT
    | TOKEN_GT
    | TOKEN_LEQ
    | TOKEN_GEQ
    | TOKEN_EQ
    | TOKEN_NEQ
    | TOKEN_AND
    | TOKEN_OR
    | TOKEN_NOT
    | TOKEN_INT
    | TOKEN_ID
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startProg
    | NONTERM_Prog
    | NONTERM_expr
    | NONTERM_stm
    | NONTERM_StmList

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | ASSIGN  -> 1 
  | SEMICOLON  -> 2 
  | LPAR  -> 3 
  | RPAR  -> 4 
  | LCUR  -> 5 
  | RCUR  -> 6 
  | IF  -> 7 
  | THEN  -> 8 
  | ELSE  -> 9 
  | WHILE  -> 10 
  | DO  -> 11 
  | PLUS  -> 12 
  | MINUS  -> 13 
  | STAR  -> 14 
  | SLASH  -> 15 
  | LT  -> 16 
  | GT  -> 17 
  | LEQ  -> 18 
  | GEQ  -> 19 
  | EQ  -> 20 
  | NEQ  -> 21 
  | AND  -> 22 
  | OR  -> 23 
  | NOT  -> 24 
  | INT _ -> 25 
  | ID _ -> 26 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_ASSIGN 
  | 2 -> TOKEN_SEMICOLON 
  | 3 -> TOKEN_LPAR 
  | 4 -> TOKEN_RPAR 
  | 5 -> TOKEN_LCUR 
  | 6 -> TOKEN_RCUR 
  | 7 -> TOKEN_IF 
  | 8 -> TOKEN_THEN 
  | 9 -> TOKEN_ELSE 
  | 10 -> TOKEN_WHILE 
  | 11 -> TOKEN_DO 
  | 12 -> TOKEN_PLUS 
  | 13 -> TOKEN_MINUS 
  | 14 -> TOKEN_STAR 
  | 15 -> TOKEN_SLASH 
  | 16 -> TOKEN_LT 
  | 17 -> TOKEN_GT 
  | 18 -> TOKEN_LEQ 
  | 19 -> TOKEN_GEQ 
  | 20 -> TOKEN_EQ 
  | 21 -> TOKEN_NEQ 
  | 22 -> TOKEN_AND 
  | 23 -> TOKEN_OR 
  | 24 -> TOKEN_NOT 
  | 25 -> TOKEN_INT 
  | 26 -> TOKEN_ID 
  | 29 -> TOKEN_end_of_input
  | 27 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startProg 
    | 1 -> NONTERM_Prog 
    | 2 -> NONTERM_expr 
    | 3 -> NONTERM_expr 
    | 4 -> NONTERM_expr 
    | 5 -> NONTERM_expr 
    | 6 -> NONTERM_expr 
    | 7 -> NONTERM_expr 
    | 8 -> NONTERM_expr 
    | 9 -> NONTERM_expr 
    | 10 -> NONTERM_expr 
    | 11 -> NONTERM_expr 
    | 12 -> NONTERM_expr 
    | 13 -> NONTERM_expr 
    | 14 -> NONTERM_expr 
    | 15 -> NONTERM_stm 
    | 16 -> NONTERM_stm 
    | 17 -> NONTERM_stm 
    | 18 -> NONTERM_stm 
    | 19 -> NONTERM_stm 
    | 20 -> NONTERM_stm 
    | 21 -> NONTERM_stm 
    | 22 -> NONTERM_StmList 
    | 23 -> NONTERM_StmList 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 29 
let _fsyacc_tagOfErrorTerminal = 27

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | ASSIGN  -> "ASSIGN" 
  | SEMICOLON  -> "SEMICOLON" 
  | LPAR  -> "LPAR" 
  | RPAR  -> "RPAR" 
  | LCUR  -> "LCUR" 
  | RCUR  -> "RCUR" 
  | IF  -> "IF" 
  | THEN  -> "THEN" 
  | ELSE  -> "ELSE" 
  | WHILE  -> "WHILE" 
  | DO  -> "DO" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | STAR  -> "STAR" 
  | SLASH  -> "SLASH" 
  | LT  -> "LT" 
  | GT  -> "GT" 
  | LEQ  -> "LEQ" 
  | GEQ  -> "GEQ" 
  | EQ  -> "EQ" 
  | NEQ  -> "NEQ" 
  | AND  -> "AND" 
  | OR  -> "OR" 
  | NOT  -> "NOT" 
  | INT _ -> "INT" 
  | ID _ -> "ID" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | ASSIGN  -> (null : System.Object) 
  | SEMICOLON  -> (null : System.Object) 
  | LPAR  -> (null : System.Object) 
  | RPAR  -> (null : System.Object) 
  | LCUR  -> (null : System.Object) 
  | RCUR  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | THEN  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | WHILE  -> (null : System.Object) 
  | DO  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | STAR  -> (null : System.Object) 
  | SLASH  -> (null : System.Object) 
  | LT  -> (null : System.Object) 
  | GT  -> (null : System.Object) 
  | LEQ  -> (null : System.Object) 
  | GEQ  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | NEQ  -> (null : System.Object) 
  | AND  -> (null : System.Object) 
  | OR  -> (null : System.Object) 
  | NOT  -> (null : System.Object) 
  | INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 14us; 65535us; 20us; 6us; 21us; 7us; 22us; 8us; 23us; 9us; 24us; 10us; 25us; 11us; 26us; 12us; 27us; 13us; 28us; 14us; 29us; 15us; 30us; 16us; 33us; 17us; 35us; 18us; 47us; 19us; 11us; 65535us; 0us; 53us; 2us; 54us; 36us; 37us; 38us; 53us; 39us; 54us; 41us; 42us; 44us; 53us; 45us; 54us; 48us; 49us; 50us; 53us; 51us; 54us; 4us; 65535us; 0us; 2us; 38us; 39us; 44us; 45us; 50us; 51us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 18us; 30us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 2us; 1us; 23us; 1us; 1us; 1us; 2us; 1us; 3us; 11us; 4us; 4us; 5us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 13us; 11us; 4us; 5us; 5us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 13us; 11us; 4us; 5us; 6us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 13us; 11us; 4us; 5us; 6us; 7us; 7us; 8us; 9us; 10us; 11us; 12us; 13us; 11us; 4us; 5us; 6us; 7us; 8us; 8us; 9us; 10us; 11us; 12us; 13us; 11us; 4us; 5us; 6us; 7us; 8us; 9us; 9us; 10us; 11us; 12us; 13us; 11us; 4us; 5us; 6us; 7us; 8us; 9us; 10us; 10us; 11us; 12us; 13us; 11us; 4us; 5us; 6us; 7us; 8us; 9us; 10us; 11us; 11us; 12us; 13us; 11us; 4us; 5us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 12us; 13us; 11us; 4us; 5us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 13us; 13us; 11us; 4us; 5us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 13us; 14us; 11us; 4us; 5us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 13us; 15us; 14us; 4us; 5us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 13us; 16us; 17us; 18us; 19us; 12us; 4us; 5us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 13us; 20us; 21us; 1us; 4us; 1us; 5us; 1us; 6us; 1us; 7us; 1us; 8us; 1us; 9us; 1us; 10us; 1us; 11us; 1us; 12us; 1us; 13us; 1us; 14us; 1us; 14us; 1us; 15us; 1us; 15us; 1us; 15us; 4us; 16us; 17us; 18us; 19us; 4us; 16us; 17us; 18us; 19us; 2us; 16us; 18us; 2us; 17us; 19us; 3us; 17us; 19us; 23us; 2us; 17us; 19us; 1us; 18us; 1us; 18us; 1us; 19us; 1us; 19us; 2us; 19us; 23us; 1us; 19us; 2us; 20us; 21us; 2us; 20us; 21us; 1us; 20us; 1us; 21us; 2us; 21us; 23us; 1us; 21us; 1us; 22us; 1us; 23us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 7us; 9us; 11us; 13us; 25us; 37us; 49us; 61us; 73us; 85us; 97us; 109us; 121us; 133us; 145us; 157us; 172us; 185us; 187us; 189us; 191us; 193us; 195us; 197us; 199us; 201us; 203us; 205us; 207us; 209us; 211us; 213us; 215us; 220us; 225us; 228us; 231us; 235us; 238us; 240us; 242us; 244us; 246us; 249us; 251us; 254us; 257us; 259us; 261us; 264us; 266us; 268us; |]
let _fsyacc_action_rows = 55
let _fsyacc_actionTableElements = [|3us; 32768us; 7us; 35us; 10us; 47us; 26us; 32us; 0us; 49152us; 4us; 32768us; 0us; 3us; 7us; 35us; 10us; 47us; 26us; 32us; 0us; 16385us; 0us; 16386us; 0us; 16387us; 2us; 16388us; 14us; 22us; 15us; 23us; 2us; 16389us; 14us; 22us; 15us; 23us; 0us; 16390us; 0us; 16391us; 4us; 16392us; 12us; 20us; 13us; 21us; 14us; 22us; 15us; 23us; 4us; 16393us; 12us; 20us; 13us; 21us; 14us; 22us; 15us; 23us; 4us; 16394us; 12us; 20us; 13us; 21us; 14us; 22us; 15us; 23us; 4us; 16395us; 12us; 20us; 13us; 21us; 14us; 22us; 15us; 23us; 4us; 16396us; 12us; 20us; 13us; 21us; 14us; 22us; 15us; 23us; 4us; 16397us; 12us; 20us; 13us; 21us; 14us; 22us; 15us; 23us; 11us; 32768us; 4us; 31us; 12us; 20us; 13us; 21us; 14us; 22us; 15us; 23us; 16us; 26us; 17us; 27us; 18us; 28us; 19us; 29us; 20us; 24us; 21us; 25us; 11us; 32768us; 2us; 34us; 12us; 20us; 13us; 21us; 14us; 22us; 15us; 23us; 16us; 26us; 17us; 27us; 18us; 28us; 19us; 29us; 20us; 24us; 21us; 25us; 11us; 32768us; 8us; 36us; 12us; 20us; 13us; 21us; 14us; 22us; 15us; 23us; 16us; 26us; 17us; 27us; 18us; 28us; 19us; 29us; 20us; 24us; 21us; 25us; 11us; 32768us; 11us; 48us; 12us; 20us; 13us; 21us; 14us; 22us; 15us; 23us; 16us; 26us; 17us; 27us; 18us; 28us; 19us; 29us; 20us; 24us; 21us; 25us; 3us; 32768us; 3us; 30us; 25us; 4us; 26us; 5us; 3us; 32768us; 3us; 30us; 25us; 4us; 26us; 5us; 3us; 32768us; 3us; 30us; 25us; 4us; 26us; 5us; 3us; 32768us; 3us; 30us; 25us; 4us; 26us; 5us; 3us; 32768us; 3us; 30us; 25us; 4us; 26us; 5us; 3us; 32768us; 3us; 30us; 25us; 4us; 26us; 5us; 3us; 32768us; 3us; 30us; 25us; 4us; 26us; 5us; 3us; 32768us; 3us; 30us; 25us; 4us; 26us; 5us; 3us; 32768us; 3us; 30us; 25us; 4us; 26us; 5us; 3us; 32768us; 3us; 30us; 25us; 4us; 26us; 5us; 3us; 32768us; 3us; 30us; 25us; 4us; 26us; 5us; 0us; 16398us; 1us; 32768us; 1us; 33us; 3us; 32768us; 3us; 30us; 25us; 4us; 26us; 5us; 0us; 16399us; 3us; 32768us; 3us; 30us; 25us; 4us; 26us; 5us; 4us; 32768us; 5us; 38us; 7us; 35us; 10us; 47us; 26us; 32us; 1us; 16400us; 9us; 41us; 3us; 32768us; 7us; 35us; 10us; 47us; 26us; 32us; 4us; 32768us; 6us; 40us; 7us; 35us; 10us; 47us; 26us; 32us; 1us; 16401us; 9us; 43us; 3us; 32768us; 7us; 35us; 10us; 47us; 26us; 32us; 0us; 16402us; 1us; 32768us; 5us; 44us; 3us; 32768us; 7us; 35us; 10us; 47us; 26us; 32us; 4us; 32768us; 6us; 46us; 7us; 35us; 10us; 47us; 26us; 32us; 0us; 16403us; 3us; 32768us; 3us; 30us; 25us; 4us; 26us; 5us; 4us; 32768us; 5us; 50us; 7us; 35us; 10us; 47us; 26us; 32us; 0us; 16404us; 3us; 32768us; 7us; 35us; 10us; 47us; 26us; 32us; 4us; 32768us; 6us; 52us; 7us; 35us; 10us; 47us; 26us; 32us; 0us; 16405us; 0us; 16406us; 0us; 16407us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 4us; 5us; 10us; 11us; 12us; 13us; 16us; 19us; 20us; 21us; 26us; 31us; 36us; 41us; 46us; 51us; 63us; 75us; 87us; 99us; 103us; 107us; 111us; 115us; 119us; 123us; 127us; 131us; 135us; 139us; 143us; 144us; 146us; 150us; 151us; 155us; 160us; 162us; 166us; 171us; 173us; 177us; 178us; 180us; 184us; 189us; 190us; 194us; 199us; 200us; 204us; 209us; 210us; 211us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 1us; 1us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 4us; 4us; 6us; 6us; 10us; 4us; 6us; 1us; 2us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 4us; 4us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 16386us; 16387us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16398us; 65535us; 65535us; 16399us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16402us; 65535us; 65535us; 65535us; 16403us; 65535us; 65535us; 16404us; 65535us; 65535us; 16405us; 16406us; 16407us; |]
let _fsyacc_reductions ()  =    [| 
# 248 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?>  ConcreteDomain.prog  in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : 'gentype__startProg));
# 257 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_StmList in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 31 "Parser.fsy"
                                                   Prog((_1)) 
                   )
# 31 "Parser.fsy"
                 :  ConcreteDomain.prog ));
# 268 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> System.Int32 in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 35 "Parser.fsy"
                                                       Int(_1) 
                   )
# 35 "Parser.fsy"
                 : 'gentype_expr));
# 279 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 36 "Parser.fsy"
                                                       Var(_1) 
                   )
# 36 "Parser.fsy"
                 : 'gentype_expr));
# 290 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 37 "Parser.fsy"
                                                       BinOp(_1, "+", _3) 
                   )
# 37 "Parser.fsy"
                 : 'gentype_expr));
# 302 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 38 "Parser.fsy"
                                                       BinOp(_1, "-", _3) 
                   )
# 38 "Parser.fsy"
                 : 'gentype_expr));
# 314 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 39 "Parser.fsy"
                                                       BinOp(_1, "*", _3) 
                   )
# 39 "Parser.fsy"
                 : 'gentype_expr));
# 326 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 40 "Parser.fsy"
                                                       BinOp(_1, "/", _3) 
                   )
# 40 "Parser.fsy"
                 : 'gentype_expr));
# 338 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 42 "Parser.fsy"
                                                       BinOp(_1, "==", _3) 
                   )
# 42 "Parser.fsy"
                 : 'gentype_expr));
# 350 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 43 "Parser.fsy"
                                                       BinOp(_1, "!=", _3) 
                   )
# 43 "Parser.fsy"
                 : 'gentype_expr));
# 362 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 45 "Parser.fsy"
                                                       BinOp(_1, "<",  _3) 
                   )
# 45 "Parser.fsy"
                 : 'gentype_expr));
# 374 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 46 "Parser.fsy"
                                                       BinOp(_1, ">",  _3) 
                   )
# 46 "Parser.fsy"
                 : 'gentype_expr));
# 386 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 47 "Parser.fsy"
                                                       BinOp(_1, "<=", _3) 
                   )
# 47 "Parser.fsy"
                 : 'gentype_expr));
# 398 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 48 "Parser.fsy"
                                                       BinOp(_1, ">=", _3) 
                   )
# 48 "Parser.fsy"
                 : 'gentype_expr));
# 410 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 50 "Parser.fsy"
                                                         _2 
                   )
# 50 "Parser.fsy"
                 : 'gentype_expr));
# 421 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 54 "Parser.fsy"
                                                                                       Assign(_1, _3) 
                   )
# 54 "Parser.fsy"
                 : 'gentype_stm));
# 433 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_expr in
            let _4 = parseState.GetInput(4) :?> 'gentype_stm in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 56 "Parser.fsy"
                                                                                       IfThenElse(_2, [_4], []) 
                   )
# 56 "Parser.fsy"
                 : 'gentype_stm));
# 445 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_expr in
            let _5 = parseState.GetInput(5) :?> 'gentype_StmList in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 57 "Parser.fsy"
                                                                                       IfThenElse(_2, _5, []) 
                   )
# 57 "Parser.fsy"
                 : 'gentype_stm));
# 457 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_expr in
            let _4 = parseState.GetInput(4) :?> 'gentype_stm in
            let _6 = parseState.GetInput(6) :?> 'gentype_stm in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 59 "Parser.fsy"
                                                                                       IfThenElse(_2, [_4], [_6]) 
                   )
# 59 "Parser.fsy"
                 : 'gentype_stm));
# 470 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_expr in
            let _5 = parseState.GetInput(5) :?> 'gentype_StmList in
            let _9 = parseState.GetInput(9) :?> 'gentype_StmList in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 60 "Parser.fsy"
                                                                                       IfThenElse(_2, _5, _9) 
                   )
# 60 "Parser.fsy"
                 : 'gentype_stm));
# 483 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_expr in
            let _4 = parseState.GetInput(4) :?> 'gentype_stm in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 62 "Parser.fsy"
                                                                                       While(_2, [_4]) 
                   )
# 62 "Parser.fsy"
                 : 'gentype_stm));
# 495 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_expr in
            let _5 = parseState.GetInput(5) :?> 'gentype_StmList in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 63 "Parser.fsy"
                                                                                       While(_2, _5) 
                   )
# 63 "Parser.fsy"
                 : 'gentype_stm));
# 507 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_stm in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 67 "Parser.fsy"
                                           [_1] 
                   )
# 67 "Parser.fsy"
                 : 'gentype_StmList));
# 518 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_StmList in
            let _2 = parseState.GetInput(2) :?> 'gentype_stm in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 68 "Parser.fsy"
                                           _1 @ [_2] 
                   )
# 68 "Parser.fsy"
                 : 'gentype_StmList));
|]
# 531 "Parser.fs"
let tables : FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 30;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = tables.Interpret(lexer, lexbuf, startState)
let Prog lexer lexbuf :  ConcreteDomain.prog  =
    engine lexer lexbuf 0 :?> _
