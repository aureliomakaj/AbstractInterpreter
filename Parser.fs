// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 1 "Parser.fsy"

open ConcreteDomain

# 10 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | COMMA
  | ASSIGN
  | SEMICOLON
  | LPAR
  | RPAR
  | LCUR
  | RCUR
  | LRANGE
  | RRANGE
  | IF
  | THEN
  | ELSE
  | WHILE
  | DO
  | PLUS
  | MINUS
  | STAR
  | SLASH
  | MOD
  | LT
  | GT
  | LEQ
  | GEQ
  | EQ
  | NEQ
  | AND
  | OR
  | NOT
  | INT of (System.Int32)
  | ID of (string)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_COMMA
    | TOKEN_ASSIGN
    | TOKEN_SEMICOLON
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_LCUR
    | TOKEN_RCUR
    | TOKEN_LRANGE
    | TOKEN_RRANGE
    | TOKEN_IF
    | TOKEN_THEN
    | TOKEN_ELSE
    | TOKEN_WHILE
    | TOKEN_DO
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_STAR
    | TOKEN_SLASH
    | TOKEN_MOD
    | TOKEN_LT
    | TOKEN_GT
    | TOKEN_LEQ
    | TOKEN_GEQ
    | TOKEN_EQ
    | TOKEN_NEQ
    | TOKEN_AND
    | TOKEN_OR
    | TOKEN_NOT
    | TOKEN_INT
    | TOKEN_ID
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startprog
    | NONTERM_expr
    | NONTERM_cond
    | NONTERM_prog

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | COMMA  -> 1 
  | ASSIGN  -> 2 
  | SEMICOLON  -> 3 
  | LPAR  -> 4 
  | RPAR  -> 5 
  | LCUR  -> 6 
  | RCUR  -> 7 
  | LRANGE  -> 8 
  | RRANGE  -> 9 
  | IF  -> 10 
  | THEN  -> 11 
  | ELSE  -> 12 
  | WHILE  -> 13 
  | DO  -> 14 
  | PLUS  -> 15 
  | MINUS  -> 16 
  | STAR  -> 17 
  | SLASH  -> 18 
  | MOD  -> 19 
  | LT  -> 20 
  | GT  -> 21 
  | LEQ  -> 22 
  | GEQ  -> 23 
  | EQ  -> 24 
  | NEQ  -> 25 
  | AND  -> 26 
  | OR  -> 27 
  | NOT  -> 28 
  | INT _ -> 29 
  | ID _ -> 30 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_COMMA 
  | 2 -> TOKEN_ASSIGN 
  | 3 -> TOKEN_SEMICOLON 
  | 4 -> TOKEN_LPAR 
  | 5 -> TOKEN_RPAR 
  | 6 -> TOKEN_LCUR 
  | 7 -> TOKEN_RCUR 
  | 8 -> TOKEN_LRANGE 
  | 9 -> TOKEN_RRANGE 
  | 10 -> TOKEN_IF 
  | 11 -> TOKEN_THEN 
  | 12 -> TOKEN_ELSE 
  | 13 -> TOKEN_WHILE 
  | 14 -> TOKEN_DO 
  | 15 -> TOKEN_PLUS 
  | 16 -> TOKEN_MINUS 
  | 17 -> TOKEN_STAR 
  | 18 -> TOKEN_SLASH 
  | 19 -> TOKEN_MOD 
  | 20 -> TOKEN_LT 
  | 21 -> TOKEN_GT 
  | 22 -> TOKEN_LEQ 
  | 23 -> TOKEN_GEQ 
  | 24 -> TOKEN_EQ 
  | 25 -> TOKEN_NEQ 
  | 26 -> TOKEN_AND 
  | 27 -> TOKEN_OR 
  | 28 -> TOKEN_NOT 
  | 29 -> TOKEN_INT 
  | 30 -> TOKEN_ID 
  | 33 -> TOKEN_end_of_input
  | 31 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startprog 
    | 1 -> NONTERM_expr 
    | 2 -> NONTERM_expr 
    | 3 -> NONTERM_expr 
    | 4 -> NONTERM_expr 
    | 5 -> NONTERM_expr 
    | 6 -> NONTERM_expr 
    | 7 -> NONTERM_expr 
    | 8 -> NONTERM_expr 
    | 9 -> NONTERM_expr 
    | 10 -> NONTERM_expr 
    | 11 -> NONTERM_cond 
    | 12 -> NONTERM_cond 
    | 13 -> NONTERM_cond 
    | 14 -> NONTERM_cond 
    | 15 -> NONTERM_cond 
    | 16 -> NONTERM_cond 
    | 17 -> NONTERM_cond 
    | 18 -> NONTERM_cond 
    | 19 -> NONTERM_cond 
    | 20 -> NONTERM_prog 
    | 21 -> NONTERM_prog 
    | 22 -> NONTERM_prog 
    | 23 -> NONTERM_prog 
    | 24 -> NONTERM_prog 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 33 
let _fsyacc_tagOfErrorTerminal = 31

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | COMMA  -> "COMMA" 
  | ASSIGN  -> "ASSIGN" 
  | SEMICOLON  -> "SEMICOLON" 
  | LPAR  -> "LPAR" 
  | RPAR  -> "RPAR" 
  | LCUR  -> "LCUR" 
  | RCUR  -> "RCUR" 
  | LRANGE  -> "LRANGE" 
  | RRANGE  -> "RRANGE" 
  | IF  -> "IF" 
  | THEN  -> "THEN" 
  | ELSE  -> "ELSE" 
  | WHILE  -> "WHILE" 
  | DO  -> "DO" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | STAR  -> "STAR" 
  | SLASH  -> "SLASH" 
  | MOD  -> "MOD" 
  | LT  -> "LT" 
  | GT  -> "GT" 
  | LEQ  -> "LEQ" 
  | GEQ  -> "GEQ" 
  | EQ  -> "EQ" 
  | NEQ  -> "NEQ" 
  | AND  -> "AND" 
  | OR  -> "OR" 
  | NOT  -> "NOT" 
  | INT _ -> "INT" 
  | ID _ -> "ID" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | ASSIGN  -> (null : System.Object) 
  | SEMICOLON  -> (null : System.Object) 
  | LPAR  -> (null : System.Object) 
  | RPAR  -> (null : System.Object) 
  | LCUR  -> (null : System.Object) 
  | RCUR  -> (null : System.Object) 
  | LRANGE  -> (null : System.Object) 
  | RRANGE  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | THEN  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | WHILE  -> (null : System.Object) 
  | DO  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | STAR  -> (null : System.Object) 
  | SLASH  -> (null : System.Object) 
  | MOD  -> (null : System.Object) 
  | LT  -> (null : System.Object) 
  | GT  -> (null : System.Object) 
  | LEQ  -> (null : System.Object) 
  | GEQ  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | NEQ  -> (null : System.Object) 
  | AND  -> (null : System.Object) 
  | OR  -> (null : System.Object) 
  | NOT  -> (null : System.Object) 
  | INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 19us; 65535us; 19us; 4us; 20us; 5us; 21us; 6us; 22us; 7us; 23us; 8us; 24us; 9us; 25us; 10us; 37us; 11us; 38us; 11us; 39us; 11us; 40us; 12us; 41us; 13us; 42us; 14us; 43us; 15us; 44us; 16us; 45us; 17us; 47us; 18us; 53us; 11us; 60us; 11us; 5us; 65535us; 37us; 32us; 38us; 33us; 39us; 34us; 53us; 35us; 60us; 36us; 5us; 65535us; 0us; 1us; 52us; 48us; 55us; 49us; 58us; 50us; 62us; 51us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 21us; 27us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 2us; 0us; 21us; 1us; 1us; 1us; 2us; 6us; 3us; 3us; 4us; 5us; 6us; 7us; 6us; 3us; 4us; 4us; 5us; 6us; 7us; 6us; 3us; 4us; 5us; 5us; 6us; 7us; 6us; 3us; 4us; 5us; 6us; 6us; 7us; 6us; 3us; 4us; 5us; 6us; 7us; 7us; 6us; 3us; 4us; 5us; 6us; 7us; 8us; 6us; 3us; 4us; 5us; 6us; 7us; 9us; 11us; 3us; 4us; 5us; 6us; 7us; 14us; 15us; 16us; 17us; 18us; 19us; 6us; 3us; 4us; 5us; 6us; 7us; 14us; 6us; 3us; 4us; 5us; 6us; 7us; 15us; 6us; 3us; 4us; 5us; 6us; 7us; 16us; 6us; 3us; 4us; 5us; 6us; 7us; 17us; 6us; 3us; 4us; 5us; 6us; 7us; 18us; 6us; 3us; 4us; 5us; 6us; 7us; 19us; 6us; 3us; 4us; 5us; 6us; 7us; 20us; 1us; 3us; 1us; 4us; 1us; 5us; 1us; 6us; 1us; 7us; 1us; 8us; 1us; 9us; 1us; 9us; 1us; 10us; 1us; 10us; 1us; 10us; 1us; 10us; 1us; 10us; 3us; 11us; 11us; 12us; 3us; 11us; 12us; 12us; 3us; 11us; 12us; 13us; 4us; 11us; 12us; 22us; 23us; 3us; 11us; 12us; 24us; 1us; 11us; 1us; 12us; 1us; 13us; 1us; 14us; 1us; 15us; 1us; 16us; 1us; 17us; 1us; 18us; 1us; 19us; 1us; 20us; 1us; 20us; 2us; 21us; 21us; 3us; 21us; 22us; 23us; 2us; 21us; 23us; 2us; 21us; 24us; 1us; 21us; 2us; 22us; 23us; 2us; 22us; 23us; 2us; 22us; 23us; 2us; 22us; 23us; 1us; 23us; 1us; 23us; 1us; 23us; 1us; 24us; 1us; 24us; 1us; 24us; 1us; 24us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 5us; 7us; 9us; 16us; 23us; 30us; 37us; 44us; 51us; 58us; 70us; 77us; 84us; 91us; 98us; 105us; 112us; 119us; 121us; 123us; 125us; 127us; 129us; 131us; 133us; 135us; 137us; 139us; 141us; 143us; 145us; 149us; 153us; 157us; 162us; 166us; 168us; 170us; 172us; 174us; 176us; 178us; 180us; 182us; 184us; 186us; 188us; 191us; 195us; 198us; 201us; 203us; 206us; 209us; 212us; 215us; 217us; 219us; 221us; 223us; 225us; 227us; |]
let _fsyacc_action_rows = 64
let _fsyacc_actionTableElements = [|3us; 32768us; 10us; 53us; 13us; 60us; 30us; 46us; 1us; 49152us; 3us; 52us; 0us; 16385us; 0us; 16386us; 3us; 16387us; 17us; 21us; 18us; 22us; 19us; 23us; 3us; 16388us; 17us; 21us; 18us; 22us; 19us; 23us; 1us; 16389us; 19us; 23us; 1us; 16390us; 19us; 23us; 5us; 16391us; 15us; 19us; 16us; 20us; 17us; 21us; 18us; 22us; 19us; 23us; 3us; 16392us; 17us; 21us; 18us; 22us; 19us; 23us; 6us; 32768us; 5us; 26us; 15us; 19us; 16us; 20us; 17us; 21us; 18us; 22us; 19us; 23us; 11us; 32768us; 15us; 19us; 16us; 20us; 17us; 21us; 18us; 22us; 19us; 23us; 20us; 42us; 21us; 43us; 22us; 44us; 23us; 45us; 24us; 40us; 25us; 41us; 5us; 16398us; 15us; 19us; 16us; 20us; 17us; 21us; 18us; 22us; 19us; 23us; 5us; 16399us; 15us; 19us; 16us; 20us; 17us; 21us; 18us; 22us; 19us; 23us; 5us; 16400us; 15us; 19us; 16us; 20us; 17us; 21us; 18us; 22us; 19us; 23us; 5us; 16401us; 15us; 19us; 16us; 20us; 17us; 21us; 18us; 22us; 19us; 23us; 5us; 16402us; 15us; 19us; 16us; 20us; 17us; 21us; 18us; 22us; 19us; 23us; 5us; 16403us; 15us; 19us; 16us; 20us; 17us; 21us; 18us; 22us; 19us; 23us; 5us; 16404us; 15us; 19us; 16us; 20us; 17us; 21us; 18us; 22us; 19us; 23us; 5us; 32768us; 4us; 25us; 8us; 27us; 16us; 24us; 29us; 2us; 30us; 3us; 5us; 32768us; 4us; 25us; 8us; 27us; 16us; 24us; 29us; 2us; 30us; 3us; 5us; 32768us; 4us; 25us; 8us; 27us; 16us; 24us; 29us; 2us; 30us; 3us; 5us; 32768us; 4us; 25us; 8us; 27us; 16us; 24us; 29us; 2us; 30us; 3us; 5us; 32768us; 4us; 25us; 8us; 27us; 16us; 24us; 29us; 2us; 30us; 3us; 5us; 32768us; 4us; 25us; 8us; 27us; 16us; 24us; 29us; 2us; 30us; 3us; 5us; 32768us; 4us; 25us; 8us; 27us; 16us; 24us; 29us; 2us; 30us; 3us; 0us; 16393us; 1us; 32768us; 29us; 28us; 1us; 32768us; 1us; 29us; 1us; 32768us; 29us; 30us; 1us; 32768us; 9us; 31us; 0us; 16394us; 0us; 16395us; 1us; 16396us; 26us; 37us; 2us; 16397us; 26us; 37us; 27us; 38us; 3us; 32768us; 11us; 54us; 26us; 37us; 27us; 38us; 3us; 32768us; 14us; 61us; 26us; 37us; 27us; 38us; 6us; 32768us; 4us; 25us; 8us; 27us; 16us; 24us; 28us; 39us; 29us; 2us; 30us; 3us; 6us; 32768us; 4us; 25us; 8us; 27us; 16us; 24us; 28us; 39us; 29us; 2us; 30us; 3us; 6us; 32768us; 4us; 25us; 8us; 27us; 16us; 24us; 28us; 39us; 29us; 2us; 30us; 3us; 5us; 32768us; 4us; 25us; 8us; 27us; 16us; 24us; 29us; 2us; 30us; 3us; 5us; 32768us; 4us; 25us; 8us; 27us; 16us; 24us; 29us; 2us; 30us; 3us; 5us; 32768us; 4us; 25us; 8us; 27us; 16us; 24us; 29us; 2us; 30us; 3us; 5us; 32768us; 4us; 25us; 8us; 27us; 16us; 24us; 29us; 2us; 30us; 3us; 5us; 32768us; 4us; 25us; 8us; 27us; 16us; 24us; 29us; 2us; 30us; 3us; 5us; 32768us; 4us; 25us; 8us; 27us; 16us; 24us; 29us; 2us; 30us; 3us; 1us; 32768us; 2us; 47us; 5us; 32768us; 4us; 25us; 8us; 27us; 16us; 24us; 29us; 2us; 30us; 3us; 0us; 16405us; 2us; 32768us; 3us; 52us; 7us; 56us; 2us; 32768us; 3us; 52us; 7us; 59us; 2us; 32768us; 3us; 52us; 7us; 63us; 3us; 32768us; 10us; 53us; 13us; 60us; 30us; 46us; 6us; 32768us; 4us; 25us; 8us; 27us; 16us; 24us; 28us; 39us; 29us; 2us; 30us; 3us; 1us; 32768us; 6us; 55us; 3us; 32768us; 10us; 53us; 13us; 60us; 30us; 46us; 1us; 16406us; 12us; 57us; 1us; 32768us; 6us; 58us; 3us; 32768us; 10us; 53us; 13us; 60us; 30us; 46us; 0us; 16407us; 6us; 32768us; 4us; 25us; 8us; 27us; 16us; 24us; 28us; 39us; 29us; 2us; 30us; 3us; 1us; 32768us; 6us; 62us; 3us; 32768us; 10us; 53us; 13us; 60us; 30us; 46us; 0us; 16408us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 4us; 6us; 7us; 8us; 12us; 16us; 18us; 20us; 26us; 30us; 37us; 49us; 55us; 61us; 67us; 73us; 79us; 85us; 91us; 97us; 103us; 109us; 115us; 121us; 127us; 133us; 134us; 136us; 138us; 140us; 142us; 143us; 144us; 146us; 149us; 153us; 157us; 164us; 171us; 178us; 184us; 190us; 196us; 202us; 208us; 214us; 216us; 222us; 223us; 226us; 229us; 232us; 236us; 243us; 245us; 249us; 251us; 253us; 257us; 258us; 265us; 267us; 271us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 1us; 1us; 3us; 3us; 3us; 3us; 3us; 2us; 3us; 5us; 3us; 3us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 6us; 10us; 6us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 3us; 3us; 3us; 3us; 3us; |]
let _fsyacc_immediateActions = [|65535us; 65535us; 16385us; 16386us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16393us; 65535us; 65535us; 65535us; 65535us; 16394us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16407us; 65535us; 65535us; 65535us; 16408us; |]
let _fsyacc_reductions ()  =    [| 
# 272 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?>  ConcreteDomain.prog  in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : 'gentype__startprog));
# 281 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> System.Int32 in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 32 "Parser.fsy"
                                                           Const(NInt _1) 
                   )
# 32 "Parser.fsy"
                 : 'gentype_expr));
# 292 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 33 "Parser.fsy"
                                                           Var(_1) 
                   )
# 33 "Parser.fsy"
                 : 'gentype_expr));
# 303 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 34 "Parser.fsy"
                                                           BinOp(_1, "+", _3) 
                   )
# 34 "Parser.fsy"
                 : 'gentype_expr));
# 315 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 35 "Parser.fsy"
                                                           BinOp(_1, "-", _3) 
                   )
# 35 "Parser.fsy"
                 : 'gentype_expr));
# 327 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 36 "Parser.fsy"
                                                           BinOp(_1, "*", _3) 
                   )
# 36 "Parser.fsy"
                 : 'gentype_expr));
# 339 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 37 "Parser.fsy"
                                                           BinOp(_1, "/", _3) 
                   )
# 37 "Parser.fsy"
                 : 'gentype_expr));
# 351 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 38 "Parser.fsy"
                                                           BinOp(_1, "%", _3) 
                   )
# 38 "Parser.fsy"
                 : 'gentype_expr));
# 363 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 41 "Parser.fsy"
                                                           Neg("-", _2) 
                   )
# 41 "Parser.fsy"
                 : 'gentype_expr));
# 374 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 43 "Parser.fsy"
                                                           _2 
                   )
# 43 "Parser.fsy"
                 : 'gentype_expr));
# 385 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> System.Int32 in
            let _4 = parseState.GetInput(4) :?> System.Int32 in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 45 "Parser.fsy"
                                                           Range(NInt _2, NInt _4) 
                   )
# 45 "Parser.fsy"
                 : 'gentype_expr));
# 397 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_cond in
            let _3 = parseState.GetInput(3) :?> 'gentype_cond in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 48 "Parser.fsy"
                                                       BoolOp(_1, "and", _3) 
                   )
# 48 "Parser.fsy"
                 : 'gentype_cond));
# 409 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_cond in
            let _3 = parseState.GetInput(3) :?> 'gentype_cond in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 49 "Parser.fsy"
                                                       BoolOp(_1, "or", _3) 
                   )
# 49 "Parser.fsy"
                 : 'gentype_cond));
# 421 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_cond in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 51 "Parser.fsy"
                                                       NotOp(_2) 
                   )
# 51 "Parser.fsy"
                 : 'gentype_cond));
# 432 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 53 "Parser.fsy"
                                                       Comparison(_1, "=", _3) 
                   )
# 53 "Parser.fsy"
                 : 'gentype_cond));
# 444 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 54 "Parser.fsy"
                                                       Comparison(_1, "!=", _3) 
                   )
# 54 "Parser.fsy"
                 : 'gentype_cond));
# 456 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 56 "Parser.fsy"
                                                       Comparison(_1, "<",  _3) 
                   )
# 56 "Parser.fsy"
                 : 'gentype_cond));
# 468 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 57 "Parser.fsy"
                                                       Comparison(_1, ">",  _3) 
                   )
# 57 "Parser.fsy"
                 : 'gentype_cond));
# 480 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 58 "Parser.fsy"
                                                       Comparison(_1, "<=", _3) 
                   )
# 58 "Parser.fsy"
                 : 'gentype_cond));
# 492 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 59 "Parser.fsy"
                                                       Comparison(_1, ">=", _3) 
                   )
# 59 "Parser.fsy"
                 : 'gentype_cond));
# 504 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 63 "Parser.fsy"
                                                                                   Assign(_1, _3) 
                   )
# 63 "Parser.fsy"
                 :  ConcreteDomain.prog ));
# 516 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?>  ConcreteDomain.prog  in
            let _3 = parseState.GetInput(3) :?>  ConcreteDomain.prog  in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 65 "Parser.fsy"
                                                                                   Seq(_1, _3) 
                   )
# 65 "Parser.fsy"
                 :  ConcreteDomain.prog ));
# 528 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_cond in
            let _5 = parseState.GetInput(5) :?>  ConcreteDomain.prog  in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 67 "Parser.fsy"
                                                                                   IfThenElse(_2, _5, None) 
                   )
# 67 "Parser.fsy"
                 :  ConcreteDomain.prog ));
# 540 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_cond in
            let _5 = parseState.GetInput(5) :?>  ConcreteDomain.prog  in
            let _9 = parseState.GetInput(9) :?>  ConcreteDomain.prog  in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 69 "Parser.fsy"
                                                                                   IfThenElse(_2, _5, Some _9) 
                   )
# 69 "Parser.fsy"
                 :  ConcreteDomain.prog ));
# 553 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_cond in
            let _5 = parseState.GetInput(5) :?>  ConcreteDomain.prog  in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 71 "Parser.fsy"
                                                                                   While(_2, _5) 
                   )
# 71 "Parser.fsy"
                 :  ConcreteDomain.prog ));
|]
# 566 "Parser.fs"
let tables : FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 34;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = tables.Interpret(lexer, lexbuf, startState)
let prog lexer lexbuf :  ConcreteDomain.prog  =
    engine lexer lexbuf 0 :?> _
