// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 1 "Parser.fsy"

open ConcreteDomain

# 10 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | COMMA
  | ASSIGN
  | SEMICOLON
  | LPAR
  | RPAR
  | LCUR
  | RCUR
  | LRANGE
  | RRANGE
  | TRUE
  | FALSE
  | IF
  | THEN
  | ELSE
  | WHILE
  | DO
  | PLUS
  | MINUS
  | STAR
  | SLASH
  | MOD
  | LT
  | GT
  | LEQ
  | GEQ
  | EQ
  | NEQ
  | AND
  | OR
  | NOT
  | INT of (System.Int32)
  | ID of (string)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_COMMA
    | TOKEN_ASSIGN
    | TOKEN_SEMICOLON
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_LCUR
    | TOKEN_RCUR
    | TOKEN_LRANGE
    | TOKEN_RRANGE
    | TOKEN_TRUE
    | TOKEN_FALSE
    | TOKEN_IF
    | TOKEN_THEN
    | TOKEN_ELSE
    | TOKEN_WHILE
    | TOKEN_DO
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_STAR
    | TOKEN_SLASH
    | TOKEN_MOD
    | TOKEN_LT
    | TOKEN_GT
    | TOKEN_LEQ
    | TOKEN_GEQ
    | TOKEN_EQ
    | TOKEN_NEQ
    | TOKEN_AND
    | TOKEN_OR
    | TOKEN_NOT
    | TOKEN_INT
    | TOKEN_ID
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startprog
    | NONTERM_expr
    | NONTERM_cond
    | NONTERM_prog

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | COMMA  -> 1 
  | ASSIGN  -> 2 
  | SEMICOLON  -> 3 
  | LPAR  -> 4 
  | RPAR  -> 5 
  | LCUR  -> 6 
  | RCUR  -> 7 
  | LRANGE  -> 8 
  | RRANGE  -> 9 
  | TRUE  -> 10 
  | FALSE  -> 11 
  | IF  -> 12 
  | THEN  -> 13 
  | ELSE  -> 14 
  | WHILE  -> 15 
  | DO  -> 16 
  | PLUS  -> 17 
  | MINUS  -> 18 
  | STAR  -> 19 
  | SLASH  -> 20 
  | MOD  -> 21 
  | LT  -> 22 
  | GT  -> 23 
  | LEQ  -> 24 
  | GEQ  -> 25 
  | EQ  -> 26 
  | NEQ  -> 27 
  | AND  -> 28 
  | OR  -> 29 
  | NOT  -> 30 
  | INT _ -> 31 
  | ID _ -> 32 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_COMMA 
  | 2 -> TOKEN_ASSIGN 
  | 3 -> TOKEN_SEMICOLON 
  | 4 -> TOKEN_LPAR 
  | 5 -> TOKEN_RPAR 
  | 6 -> TOKEN_LCUR 
  | 7 -> TOKEN_RCUR 
  | 8 -> TOKEN_LRANGE 
  | 9 -> TOKEN_RRANGE 
  | 10 -> TOKEN_TRUE 
  | 11 -> TOKEN_FALSE 
  | 12 -> TOKEN_IF 
  | 13 -> TOKEN_THEN 
  | 14 -> TOKEN_ELSE 
  | 15 -> TOKEN_WHILE 
  | 16 -> TOKEN_DO 
  | 17 -> TOKEN_PLUS 
  | 18 -> TOKEN_MINUS 
  | 19 -> TOKEN_STAR 
  | 20 -> TOKEN_SLASH 
  | 21 -> TOKEN_MOD 
  | 22 -> TOKEN_LT 
  | 23 -> TOKEN_GT 
  | 24 -> TOKEN_LEQ 
  | 25 -> TOKEN_GEQ 
  | 26 -> TOKEN_EQ 
  | 27 -> TOKEN_NEQ 
  | 28 -> TOKEN_AND 
  | 29 -> TOKEN_OR 
  | 30 -> TOKEN_NOT 
  | 31 -> TOKEN_INT 
  | 32 -> TOKEN_ID 
  | 35 -> TOKEN_end_of_input
  | 33 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startprog 
    | 1 -> NONTERM_expr 
    | 2 -> NONTERM_expr 
    | 3 -> NONTERM_expr 
    | 4 -> NONTERM_expr 
    | 5 -> NONTERM_expr 
    | 6 -> NONTERM_expr 
    | 7 -> NONTERM_expr 
    | 8 -> NONTERM_expr 
    | 9 -> NONTERM_expr 
    | 10 -> NONTERM_cond 
    | 11 -> NONTERM_cond 
    | 12 -> NONTERM_cond 
    | 13 -> NONTERM_cond 
    | 14 -> NONTERM_cond 
    | 15 -> NONTERM_cond 
    | 16 -> NONTERM_cond 
    | 17 -> NONTERM_cond 
    | 18 -> NONTERM_cond 
    | 19 -> NONTERM_cond 
    | 20 -> NONTERM_cond 
    | 21 -> NONTERM_prog 
    | 22 -> NONTERM_prog 
    | 23 -> NONTERM_prog 
    | 24 -> NONTERM_prog 
    | 25 -> NONTERM_prog 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 35 
let _fsyacc_tagOfErrorTerminal = 33

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | COMMA  -> "COMMA" 
  | ASSIGN  -> "ASSIGN" 
  | SEMICOLON  -> "SEMICOLON" 
  | LPAR  -> "LPAR" 
  | RPAR  -> "RPAR" 
  | LCUR  -> "LCUR" 
  | RCUR  -> "RCUR" 
  | LRANGE  -> "LRANGE" 
  | RRANGE  -> "RRANGE" 
  | TRUE  -> "TRUE" 
  | FALSE  -> "FALSE" 
  | IF  -> "IF" 
  | THEN  -> "THEN" 
  | ELSE  -> "ELSE" 
  | WHILE  -> "WHILE" 
  | DO  -> "DO" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | STAR  -> "STAR" 
  | SLASH  -> "SLASH" 
  | MOD  -> "MOD" 
  | LT  -> "LT" 
  | GT  -> "GT" 
  | LEQ  -> "LEQ" 
  | GEQ  -> "GEQ" 
  | EQ  -> "EQ" 
  | NEQ  -> "NEQ" 
  | AND  -> "AND" 
  | OR  -> "OR" 
  | NOT  -> "NOT" 
  | INT _ -> "INT" 
  | ID _ -> "ID" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | ASSIGN  -> (null : System.Object) 
  | SEMICOLON  -> (null : System.Object) 
  | LPAR  -> (null : System.Object) 
  | RPAR  -> (null : System.Object) 
  | LCUR  -> (null : System.Object) 
  | RCUR  -> (null : System.Object) 
  | LRANGE  -> (null : System.Object) 
  | RRANGE  -> (null : System.Object) 
  | TRUE  -> (null : System.Object) 
  | FALSE  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | THEN  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | WHILE  -> (null : System.Object) 
  | DO  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | STAR  -> (null : System.Object) 
  | SLASH  -> (null : System.Object) 
  | MOD  -> (null : System.Object) 
  | LT  -> (null : System.Object) 
  | GT  -> (null : System.Object) 
  | LEQ  -> (null : System.Object) 
  | GEQ  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | NEQ  -> (null : System.Object) 
  | AND  -> (null : System.Object) 
  | OR  -> (null : System.Object) 
  | NOT  -> (null : System.Object) 
  | INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 18us; 65535us; 18us; 4us; 19us; 5us; 20us; 6us; 21us; 7us; 22us; 8us; 23us; 9us; 37us; 10us; 38us; 10us; 39us; 10us; 40us; 11us; 41us; 12us; 42us; 13us; 43us; 14us; 44us; 15us; 45us; 16us; 47us; 17us; 53us; 10us; 60us; 10us; 5us; 65535us; 37us; 32us; 38us; 33us; 39us; 34us; 53us; 35us; 60us; 36us; 5us; 65535us; 0us; 1us; 52us; 48us; 55us; 49us; 58us; 50us; 62us; 51us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 20us; 26us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 2us; 0us; 22us; 1us; 1us; 1us; 2us; 5us; 3us; 3us; 4us; 5us; 6us; 5us; 3us; 4us; 4us; 5us; 6us; 5us; 3us; 4us; 5us; 5us; 6us; 5us; 3us; 4us; 5us; 6us; 6us; 5us; 3us; 4us; 5us; 6us; 7us; 5us; 3us; 4us; 5us; 6us; 8us; 10us; 3us; 4us; 5us; 6us; 15us; 16us; 17us; 18us; 19us; 20us; 5us; 3us; 4us; 5us; 6us; 15us; 5us; 3us; 4us; 5us; 6us; 16us; 5us; 3us; 4us; 5us; 6us; 17us; 5us; 3us; 4us; 5us; 6us; 18us; 5us; 3us; 4us; 5us; 6us; 19us; 5us; 3us; 4us; 5us; 6us; 20us; 5us; 3us; 4us; 5us; 6us; 21us; 1us; 3us; 1us; 4us; 1us; 5us; 1us; 6us; 1us; 7us; 1us; 8us; 1us; 8us; 1us; 9us; 1us; 9us; 1us; 9us; 1us; 9us; 1us; 9us; 1us; 10us; 1us; 11us; 3us; 12us; 12us; 13us; 3us; 12us; 13us; 13us; 3us; 12us; 13us; 14us; 4us; 12us; 13us; 23us; 24us; 3us; 12us; 13us; 25us; 1us; 12us; 1us; 13us; 1us; 14us; 1us; 15us; 1us; 16us; 1us; 17us; 1us; 18us; 1us; 19us; 1us; 20us; 1us; 21us; 1us; 21us; 2us; 22us; 22us; 3us; 22us; 23us; 24us; 2us; 22us; 24us; 2us; 22us; 25us; 1us; 22us; 2us; 23us; 24us; 2us; 23us; 24us; 2us; 23us; 24us; 2us; 23us; 24us; 1us; 24us; 1us; 24us; 1us; 24us; 1us; 25us; 1us; 25us; 1us; 25us; 1us; 25us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 5us; 7us; 9us; 15us; 21us; 27us; 33us; 39us; 45us; 56us; 62us; 68us; 74us; 80us; 86us; 92us; 98us; 100us; 102us; 104us; 106us; 108us; 110us; 112us; 114us; 116us; 118us; 120us; 122us; 124us; 126us; 130us; 134us; 138us; 143us; 147us; 149us; 151us; 153us; 155us; 157us; 159us; 161us; 163us; 165us; 167us; 169us; 172us; 176us; 179us; 182us; 184us; 187us; 190us; 193us; 196us; 198us; 200us; 202us; 204us; 206us; 208us; |]
let _fsyacc_action_rows = 64
let _fsyacc_actionTableElements = [|3us; 32768us; 12us; 53us; 15us; 60us; 32us; 46us; 1us; 49152us; 3us; 52us; 0us; 16385us; 0us; 16386us; 2us; 16387us; 19us; 20us; 20us; 21us; 2us; 16388us; 19us; 20us; 20us; 21us; 0us; 16389us; 0us; 16390us; 2us; 16391us; 19us; 20us; 20us; 21us; 5us; 32768us; 5us; 24us; 17us; 18us; 18us; 19us; 19us; 20us; 20us; 21us; 10us; 32768us; 17us; 18us; 18us; 19us; 19us; 20us; 20us; 21us; 22us; 42us; 23us; 43us; 24us; 44us; 25us; 45us; 26us; 40us; 27us; 41us; 4us; 16399us; 17us; 18us; 18us; 19us; 19us; 20us; 20us; 21us; 4us; 16400us; 17us; 18us; 18us; 19us; 19us; 20us; 20us; 21us; 4us; 16401us; 17us; 18us; 18us; 19us; 19us; 20us; 20us; 21us; 4us; 16402us; 17us; 18us; 18us; 19us; 19us; 20us; 20us; 21us; 4us; 16403us; 17us; 18us; 18us; 19us; 19us; 20us; 20us; 21us; 4us; 16404us; 17us; 18us; 18us; 19us; 19us; 20us; 20us; 21us; 4us; 16405us; 17us; 18us; 18us; 19us; 19us; 20us; 20us; 21us; 5us; 32768us; 4us; 23us; 8us; 25us; 18us; 22us; 31us; 2us; 32us; 3us; 5us; 32768us; 4us; 23us; 8us; 25us; 18us; 22us; 31us; 2us; 32us; 3us; 5us; 32768us; 4us; 23us; 8us; 25us; 18us; 22us; 31us; 2us; 32us; 3us; 5us; 32768us; 4us; 23us; 8us; 25us; 18us; 22us; 31us; 2us; 32us; 3us; 5us; 32768us; 4us; 23us; 8us; 25us; 18us; 22us; 31us; 2us; 32us; 3us; 5us; 32768us; 4us; 23us; 8us; 25us; 18us; 22us; 31us; 2us; 32us; 3us; 0us; 16392us; 1us; 32768us; 31us; 26us; 1us; 32768us; 1us; 27us; 1us; 32768us; 31us; 28us; 1us; 32768us; 9us; 29us; 0us; 16393us; 0us; 16394us; 0us; 16395us; 0us; 16396us; 1us; 16397us; 28us; 37us; 2us; 16398us; 28us; 37us; 29us; 38us; 3us; 32768us; 13us; 54us; 28us; 37us; 29us; 38us; 3us; 32768us; 16us; 61us; 28us; 37us; 29us; 38us; 8us; 32768us; 4us; 23us; 8us; 25us; 10us; 30us; 11us; 31us; 18us; 22us; 30us; 39us; 31us; 2us; 32us; 3us; 8us; 32768us; 4us; 23us; 8us; 25us; 10us; 30us; 11us; 31us; 18us; 22us; 30us; 39us; 31us; 2us; 32us; 3us; 8us; 32768us; 4us; 23us; 8us; 25us; 10us; 30us; 11us; 31us; 18us; 22us; 30us; 39us; 31us; 2us; 32us; 3us; 5us; 32768us; 4us; 23us; 8us; 25us; 18us; 22us; 31us; 2us; 32us; 3us; 5us; 32768us; 4us; 23us; 8us; 25us; 18us; 22us; 31us; 2us; 32us; 3us; 5us; 32768us; 4us; 23us; 8us; 25us; 18us; 22us; 31us; 2us; 32us; 3us; 5us; 32768us; 4us; 23us; 8us; 25us; 18us; 22us; 31us; 2us; 32us; 3us; 5us; 32768us; 4us; 23us; 8us; 25us; 18us; 22us; 31us; 2us; 32us; 3us; 5us; 32768us; 4us; 23us; 8us; 25us; 18us; 22us; 31us; 2us; 32us; 3us; 1us; 32768us; 2us; 47us; 5us; 32768us; 4us; 23us; 8us; 25us; 18us; 22us; 31us; 2us; 32us; 3us; 0us; 16406us; 2us; 32768us; 3us; 52us; 7us; 56us; 2us; 32768us; 3us; 52us; 7us; 59us; 2us; 32768us; 3us; 52us; 7us; 63us; 3us; 32768us; 12us; 53us; 15us; 60us; 32us; 46us; 8us; 32768us; 4us; 23us; 8us; 25us; 10us; 30us; 11us; 31us; 18us; 22us; 30us; 39us; 31us; 2us; 32us; 3us; 1us; 32768us; 6us; 55us; 3us; 32768us; 12us; 53us; 15us; 60us; 32us; 46us; 1us; 16407us; 14us; 57us; 1us; 32768us; 6us; 58us; 3us; 32768us; 12us; 53us; 15us; 60us; 32us; 46us; 0us; 16408us; 8us; 32768us; 4us; 23us; 8us; 25us; 10us; 30us; 11us; 31us; 18us; 22us; 30us; 39us; 31us; 2us; 32us; 3us; 1us; 32768us; 6us; 62us; 3us; 32768us; 12us; 53us; 15us; 60us; 32us; 46us; 0us; 16409us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 4us; 6us; 7us; 8us; 11us; 14us; 15us; 16us; 19us; 25us; 36us; 41us; 46us; 51us; 56us; 61us; 66us; 71us; 77us; 83us; 89us; 95us; 101us; 107us; 108us; 110us; 112us; 114us; 116us; 117us; 118us; 119us; 120us; 122us; 125us; 129us; 133us; 142us; 151us; 160us; 166us; 172us; 178us; 184us; 190us; 196us; 198us; 204us; 205us; 208us; 211us; 214us; 218us; 227us; 229us; 233us; 235us; 237us; 241us; 242us; 251us; 253us; 257us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 1us; 1us; 3us; 3us; 3us; 3us; 2us; 3us; 5us; 1us; 1us; 3us; 3us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 6us; 10us; 6us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 3us; 3us; 3us; 3us; 3us; |]
let _fsyacc_immediateActions = [|65535us; 65535us; 16385us; 16386us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16392us; 65535us; 65535us; 65535us; 65535us; 16393us; 16394us; 16395us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16408us; 65535us; 65535us; 65535us; 16409us; |]
let _fsyacc_reductions ()  =    [| 
# 285 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?>  ConcreteDomain.prog  in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : 'gentype__startprog));
# 294 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> System.Int32 in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 32 "Parser.fsy"
                                                           Const(NInt _1) 
                   )
# 32 "Parser.fsy"
                 : 'gentype_expr));
# 305 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 33 "Parser.fsy"
                                                           Var(_1) 
                   )
# 33 "Parser.fsy"
                 : 'gentype_expr));
# 316 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 34 "Parser.fsy"
                                                           BinOp(_1, "+", _3) 
                   )
# 34 "Parser.fsy"
                 : 'gentype_expr));
# 328 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 35 "Parser.fsy"
                                                           BinOp(_1, "-", _3) 
                   )
# 35 "Parser.fsy"
                 : 'gentype_expr));
# 340 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 36 "Parser.fsy"
                                                           BinOp(_1, "*", _3) 
                   )
# 36 "Parser.fsy"
                 : 'gentype_expr));
# 352 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 37 "Parser.fsy"
                                                           BinOp(_1, "/", _3) 
                   )
# 37 "Parser.fsy"
                 : 'gentype_expr));
# 364 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 40 "Parser.fsy"
                                                           Neg("-", _2) 
                   )
# 40 "Parser.fsy"
                 : 'gentype_expr));
# 375 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 42 "Parser.fsy"
                                                           _2 
                   )
# 42 "Parser.fsy"
                 : 'gentype_expr));
# 386 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> System.Int32 in
            let _4 = parseState.GetInput(4) :?> System.Int32 in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 44 "Parser.fsy"
                                                           Range(NInt _2, NInt _4) 
                   )
# 44 "Parser.fsy"
                 : 'gentype_expr));
# 398 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 47 "Parser.fsy"
                                                       Bool(true) 
                   )
# 47 "Parser.fsy"
                 : 'gentype_cond));
# 408 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 48 "Parser.fsy"
                                                       Bool(false) 
                   )
# 48 "Parser.fsy"
                 : 'gentype_cond));
# 418 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_cond in
            let _3 = parseState.GetInput(3) :?> 'gentype_cond in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 49 "Parser.fsy"
                                                       BoolOp(_1, "and", _3) 
                   )
# 49 "Parser.fsy"
                 : 'gentype_cond));
# 430 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_cond in
            let _3 = parseState.GetInput(3) :?> 'gentype_cond in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 50 "Parser.fsy"
                                                       BoolOp(_1, "or", _3) 
                   )
# 50 "Parser.fsy"
                 : 'gentype_cond));
# 442 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_cond in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 52 "Parser.fsy"
                                                       NotOp(_2) 
                   )
# 52 "Parser.fsy"
                 : 'gentype_cond));
# 453 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 54 "Parser.fsy"
                                                       Comparison(_1, "=", _3) 
                   )
# 54 "Parser.fsy"
                 : 'gentype_cond));
# 465 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 55 "Parser.fsy"
                                                       Comparison(_1, "!=", _3) 
                   )
# 55 "Parser.fsy"
                 : 'gentype_cond));
# 477 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 57 "Parser.fsy"
                                                       Comparison(_1, "<",  _3) 
                   )
# 57 "Parser.fsy"
                 : 'gentype_cond));
# 489 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 58 "Parser.fsy"
                                                       Comparison(_1, ">",  _3) 
                   )
# 58 "Parser.fsy"
                 : 'gentype_cond));
# 501 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 59 "Parser.fsy"
                                                       Comparison(_1, "<=", _3) 
                   )
# 59 "Parser.fsy"
                 : 'gentype_cond));
# 513 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 60 "Parser.fsy"
                                                       Comparison(_1, ">=", _3) 
                   )
# 60 "Parser.fsy"
                 : 'gentype_cond));
# 525 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 64 "Parser.fsy"
                                                                                   Assign(_1, _3) 
                   )
# 64 "Parser.fsy"
                 :  ConcreteDomain.prog ));
# 537 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?>  ConcreteDomain.prog  in
            let _3 = parseState.GetInput(3) :?>  ConcreteDomain.prog  in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 66 "Parser.fsy"
                                                                                   Seq(_1, _3) 
                   )
# 66 "Parser.fsy"
                 :  ConcreteDomain.prog ));
# 549 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_cond in
            let _5 = parseState.GetInput(5) :?>  ConcreteDomain.prog  in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 68 "Parser.fsy"
                                                                                   IfThenElse(_2, _5, None) 
                   )
# 68 "Parser.fsy"
                 :  ConcreteDomain.prog ));
# 561 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_cond in
            let _5 = parseState.GetInput(5) :?>  ConcreteDomain.prog  in
            let _9 = parseState.GetInput(9) :?>  ConcreteDomain.prog  in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 70 "Parser.fsy"
                                                                                   IfThenElse(_2, _5, Some _9) 
                   )
# 70 "Parser.fsy"
                 :  ConcreteDomain.prog ));
# 574 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_cond in
            let _5 = parseState.GetInput(5) :?>  ConcreteDomain.prog  in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 72 "Parser.fsy"
                                                                                   While(_2, _5) 
                   )
# 72 "Parser.fsy"
                 :  ConcreteDomain.prog ));
|]
# 587 "Parser.fs"
let tables : FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 36;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = tables.Interpret(lexer, lexbuf, startState)
let prog lexer lexbuf :  ConcreteDomain.prog  =
    engine lexer lexbuf 0 :?> _
