%{
open ConcreteDomain
%}

%token <string> ID
%token <System.Int32> INT

%token 
       ASSIGN SEMICOLON LPAR RPAR LCUR RCUR
       IF THEN ELSE WHILE DO
       PLUS MINUS STAR SLASH
       LT GT LEQ GEQ EQ NEQ
       AND OR NOT
%token EOF

%nonassoc THEN ELSE
%left SEMICOLON
%left OR
%left AND 
%left EQ LT GT LEQ GEQ NEQ
%left PLUS MINUS 
%left STAR SLASH 

%type < ConcreteDomain.prog > Prog

%start Prog

%%

Prog:
    StmList EOF             { Prog(($1)) }


expr:
      INT                       { Int($1) }
    | ID                        { Var($1) }
    | expr PLUS expr            { BinOp($1, "+", $3) }
    | expr MINUS expr           { BinOp($1, "-", $3) }
    | expr STAR expr            { BinOp($1, "*", $3) }
    | expr SLASH expr           { BinOp($1, "/", $3) }

    | expr EQ expr              { BinOp($1, "==", $3) }
    | expr NEQ expr             { BinOp($1, "!=", $3) }

    | expr LT expr              { BinOp($1, "<",  $3) }
    | expr GT expr              { BinOp($1, ">",  $3) }
    | expr LEQ expr             { BinOp($1, "<=", $3) }
    | expr GEQ expr             { BinOp($1, ">=", $3) }

    | LPAR expr RPAR              { $2 }


stm: 
      ID ASSIGN expr SEMICOLON                                  { Assign($1, $3) }

    | IF expr THEN stm                                          { IfThenElse($2, [$4], []) }
    | IF expr THEN LCUR StmList RCUR                            { IfThenElse($2, $5, []) }

    | IF expr THEN stm ELSE stm                                 { IfThenElse($2, [$4], [$6]) }
    | IF expr THEN LCUR StmList RCUR ELSE LCUR StmList RCUR     { IfThenElse($2, $5, $9) }

    | WHILE expr DO stm                                         { While($2, [$4]) }
    | WHILE expr DO LCUR StmList RCUR                           { While($2, $5) }
    

StmList: 
      stm           { [$1] }
    | StmList stm   { $1 @ [$2] }