%{
open ConcreteDomain
%}

%token <string> ID
%token <System.Int32> INT

%token 
       COMMA ASSIGN SEMICOLON LPAR RPAR LCUR RCUR LRANGE RRANGE
       TRUE FALSE IF THEN ELSE WHILE DO 
       PLUS MINUS STAR SLASH MOD
       LT GT LEQ GEQ EQ NEQ
       AND OR NOT
%token EOF

%nonassoc THEN ELSE
%left SEMICOLON
%left OR
%left AND 
%left EQ LT GT LEQ GEQ NEQ
%left PLUS MINUS 
%left STAR SLASH 

%type < ConcreteDomain.prog > prog

%start prog

%%


expr:
      INT                           { Const(NInt $1) }
    | ID                            { Var($1) }
    | expr PLUS expr                { BinOp($1, "+", $3) }
    | expr MINUS expr               { BinOp($1, "-", $3) }
    | expr STAR expr                { BinOp($1, "*", $3) }
    | expr SLASH expr               { BinOp($1, "/", $3) }


    | MINUS expr                    { Neg("-", $2) }

    | LPAR expr RPAR                { $2 }

    | LRANGE INT COMMA INT RRANGE   { Range(NInt $2, NInt $4) }

cond:
    | TRUE                      { Bool(true) }
    | FALSE                     { Bool(false) }
    | cond AND cond             { BoolOp($1, "and", $3) }
    | cond OR cond              { BoolOp($1, "or", $3) }

    | NOT cond                  { NotOp($2) }

    | expr EQ expr              { Comparison($1, "=", $3) }
    | expr NEQ expr             { Comparison($1, "!=", $3) }

    | expr LT expr              { Comparison($1, "<",  $3) }
    | expr GT expr              { Comparison($1, ">",  $3) }
    | expr LEQ expr             { Comparison($1, "<=", $3) }
    | expr GEQ expr             { Comparison($1, ">=", $3) }
    

prog: 
      ID ASSIGN expr                                        { Assign($1, $3) }
        
    | prog SEMICOLON prog                                   { Seq($1, $3) }

    | IF cond THEN LCUR prog RCUR                           { IfThenElse($2, $5, None) }

    | IF cond THEN LCUR prog RCUR ELSE LCUR prog RCUR       { IfThenElse($2, $5, Some $9) }

    | WHILE cond DO LCUR prog RCUR                          { While($2, $5) }
    