{
open System
open FSharp.Text.Lexing
open Parser
open ConcreteDomain

let newline (lexbuf: LexBuffer<_>) =  lexbuf.EndPos <- lexbuf.EndPos.NextLine
let lexeme = LexBuffer<_>.LexemeString

}

let digit = ('-'?['0'-'9']+)
let whitespace = [' ' '\t' ]+
let newline = ('\n' | '\r' '\n')

let id = ['a'-'z' 'A'-'Z']+


rule token = parse
	| whitespace	{ token lexbuf }
	| newline		{ newline lexbuf; token lexbuf }

	| ","			{ COMMA }
	| ":="          { ASSIGN }
	| ";"           { SEMICOLON }
	| "("           { LPAR }
	| ")"           { RPAR }
	| "["			{ LRANGE }
	| "]"			{ RRANGE }
	| "{"			{ LCUR }
	| "}"			{ RCUR }

	| "true"		{ TRUE }
	| "false"		{ FALSE }
	| "if"          { IF }
	| "then"        { THEN }
	| "else"        { ELSE }
	| "while"       { WHILE }
	| "do"          { DO }
	| "skip"		{ SKIP }

	| "+"			{ PLUS }
	| "-"			{ MINUS }
	| "*"			{ STAR }
	| "/"			{ SLASH }

	| "="			{ EQ }
	| "!="			{ NEQ }
	| "<"			{ LT }
	| ">"			{ GT }
	| "<="			{ LEQ }
	| ">="			{ GEQ }

	| "or"			{ OR }
	| "and"			{ AND }
	| "not"			{ NOT }

	| digit   	    { INT (Int32.Parse (lexeme lexbuf)) }

	| id 		    { ID (lexeme lexbuf) }

	| eof			{ EOF }
